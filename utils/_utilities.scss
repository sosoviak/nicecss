////
/// Utils
/// @author Nicemondays
/// @since version 0.1
////

/// Truncate mixin genera una ellipsis en el texto
/// @parameter {number} $truncation-boundary
/// @example
///   @include truncate(200px);
@mixin truncate($truncation-boundary){
    max-width:$truncation-boundary;
    white-space:nowrap;
    overflow:hidden;
    text-overflow:ellipsis;
}

/// Hide text technique. Use this mixin for semantic CSS image replacement
@mixin hide-text(){
  border: 0;
  font: 0/0 a;
  text-shadow: none;
  color: transparent;
}

/// Mixin for CSS image replacement.
/// @parameter {string} $file - Name of image file
/// @parameter {number} $w - Width of replacement area
/// @parameter {number} $h - Height of replacement area
/// @example
///   @include image-replacement('logo.png', 200px, 100px);
@mixin image-replacement($file, $w, $h){
  @include hide-text;
  background: image($file);
  width: $w;
  height: $h;
}


/// Based on Event wrapper
/// @parameter {boolean} $active - If true we add a "active" class
/// @example
///   .element {
///     @include on-event{
///       color: red;
///     }
///   }
/// @author Harry Roberts
@mixin on-event($active: false) {
    @if $active {
        &:hover,
        &:active,
        &:focus,
        &.active {
            @content;
        }
    } @else {
        &:hover,
        &:active,
        &:focus {
            @content;
        }
    }
}

/// Este mixin es un wrapper que sirve para definir nuevas propiedades
/// que se har√°n activas si este elemento tiene como padre un elemento con el selector definido
/// @parameter {string} $selector - Selector of parent element
/// @example
///   .element {
///     @include when-inside(.active){
///       display: none;
///     }
///   }
/// @author SASS Guidelin
/// @link <http://sass-guidelin.es/>
@mixin when-inside($selector) {
  #{$selector} & {
    @content;
  }
}