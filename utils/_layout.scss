////
/// Layout utils
/// @author Nicemondays
/// @since version 0.1
////


/// Genera un valor en rem con un fallback en px para legacy browsers usando como multiplo el valor $base-spacing-unit
/// @parameter {string} $property
/// @parameter {list} $values
/// @parameter {boolean} $isImportant
/// @example
///   @include rem-space(margin, 0 1, true);
/// @see {function} rem-space
/// @see {function} space
@mixin rem-space($property, $values, $isImportant:false) {
  $important: '';

  @if $isImportant == true {
    $important: ' !important';
  }

  #{$property}: space($values)#{$important};
  #{$property}: rem-space($values)#{$important};
}

/// Genera el código necesario para propociar un centrado vertical de los hijos
/// Los hijos del elemento al que se aplique este mixin deben ser inline-block con vertical-align:middle
/// Se produce un error si el hijo ocupa el 100% del ancho
/// @example
///   .parent {
///     @include ghostVerticalAlign;
///     .child {
///       display: inline-block;
///       vertical-aling: middle;
///       width: 100px;
///     }
///   }
/// @author css-trick
/// @link http://css-tricks.com/centering-in-the-unknown/
@mixin ghostVerticalAlign(){
  &:before {
    content: '';
    display: inline-block;
    vertical-align: middle;
    height: 100%; width: .1px;
  }
}

/// Genera listas justicadas en ancho
/// @example
///   .ul {
///     @include justify-list;
///   }
@mixin justify-list() {
  text-align: justify;
  font-size: 0.1px;
  &:after {
    content: '';
    width: 100%;
    display: inline-block;
  }
  & > li { 
    display: inline-block;
    font-size: $base-font-size
  }
}

/// Genera listas inline. El primer parámetro hace referencia al tipo de estilo usado para la lista. Pudiendo ser inlineblock o float. El segundo es la separación entre elementos. 
/// @parameter {string} $mode [float]
/// @parameter {number} $margin
/// @example
///   .ul {
///     @include inline-list(float,1);
///   }
@mixin inline-list($mode: float, $margin: 0.5) {
  @if $mode == float {
    @include clearfix;
  }
  list-style: none;
  padding: 0;
  > li {
    @if $mode == float {
      float: left;
      display: block;
    } @else {
      display: inline-block;
    }
    @include rem-space(margin-left, $margin);
    &:first-child { margin-left: 0; }
  }
}

/// Clearfix
@mixin clearfix() {
  &:after{
    content: "";
    display: table;
    clear: both
  }
}

/// Horizontal centering for block elements
@mixin center-block {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

/// Absolute center mixin
/// Use translate for modern browser and margin technique for legacy
/// @parameter {boolean} $legacy [false]
/// @parameter {number} $width
/// @parameter {number} $height
@mixin absolute-center($legacy:false, $width: 0, $height: 0) {
  position: absolute;
  top: 50%;
  left: 50%;
  @if $legacy {
    margin-left: ($width / 2) * -1px;
    margin-top: ($height / 2) * -1px;
  } @else {
    -webkit-transform: translate(-50%,-50%);
    -ms-transform: translate(-50%,-50%);
    transform: translate(-50%,-50%);
  }
}

/// Absolute cover mixin
@mixin coverer {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}

/// Absolute position mixin
/// Este mixin es un shortcut para el posicionado en absoluto usando rem-space
/// acepta una lista de argumentos que sigue el orden top - right - bottom - left
/// @parameter {list} $args
/// @example
///   @include absolute(0 1 1 2);
/// @see {mixin} rem-space
@mixin absolute($args) {
  $top: nth($args, 1);
  $right: nth($args, 2);
  $bottom: nth($args, 3);
  $left: nth($args, 4);
  
  position: absolute;
  @if $top { @include rem-space(top, $top); };
  @if $right { @include rem-space(right, $right); };
  @if $bottom { @include rem-space(bottom, $bottom); };
  @if $left { @include rem-space(left, $left); };
}


/// Force aspect ratio mixin
/// @parameter {number} $width
/// @parameter {number} $height
/// @example
///   @include aspect-ratio(16, 9, '.inner');
/// @author css-tricks.com
@mixin aspect-ratio($width, $height, $child: '.content') {
  position: relative;
  &:before {
    display: block;
    content: "";
    width: 100%;
    padding-top: ($height / $width) * 100%;
  }
  > #{$child} {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
  }
}

///
/// Viewport sized typography with minimum and maximum values
///
/// @author Eduardo Boucas (@eduardoboucas)
///
/// @param {Number}   $responsive  - Viewport-based size
/// @param {Number}   $min         - Minimum font size (px)
/// @param {Number}   $max         - Maximum font size (px)
///                                  (optional)
/// @param {Number}   $fallback    - Fallback for viewport-
///                                  based units (optional)
///
/// @example scss - 5vw font size (with 50px fallback), 
///                 minumum of 35px and maximum of 150px
///  @include responsive-font(5vw, 35px, 150px, 50px);
///
@mixin responsive-font($responsive, $min, $max: false, $fallback: false) {
  $responsive-unitless: $responsive / ($responsive - $responsive + 1);
  $dimension: if(unit($responsive) == 'vh', 'height', 'width');
  $min-breakpoint: $min / $responsive-unitless * 100;
  
  @media (max-#{$dimension}: #{$min-breakpoint}) {
    font-size: $min;
  }
  
  @if $max {
    $max-breakpoint: $max / $responsive-unitless * 100;
    
    @media (min-#{$dimension}: #{$max-breakpoint}) {
      font-size: $max;
    }
  }
  
  @if $fallback {
    font-size: $fallback;
  }
  
  font-size: $responsive;
}