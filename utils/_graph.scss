////
/// Graphic utils
/// @author Nicemondays
/// @since version 0.1
////

/// Pinta un triangulo a trav√©s del calculo de bordes
/// @parameter {number} $width
/// @parameter {number} $height
/// @parameter {string} $direction
/// @parameter {color} $color
/// @example
///   @include triangle(25px, 10px, down, blue);
@mixin triangle($width: 20px, $height: 20px, $direction: up, $color: red) {
  width: 0;
  height: 0;
  
  // Right
  @if $direction == right {
    border-top: $height/2 solid transparent;
    border-bottom: $height/2 solid transparent;
    border-left: $width solid $color;
  }

  // Left
  @if $direction == left {
    border-top: $height/2 solid transparent;
    border-bottom: $height/2 solid transparent;
    border-right: $width solid $color;
  }

  // Up
  @if $direction == up {
    border-left: $width/2 solid transparent;
    border-right: $width/2 solid transparent;
    border-bottom: $height solid $color;
  }

  // Down
  @if $direction == down {
    border-left: $width/2 solid transparent;
    border-right: $width/2 solid transparent;
    border-top: $height solid $color;
  }
}

/// Pinta un circulo usando un border-radius del 50%
/// @parameter {number} $width
/// @parameter {number} $height
/// @parameter {string} $direction
/// @parameter {color} $color
/// @example
///   @include triangle(25px, 10px, down, blue);
@mixin circle($size, $bgcolor: transparent) {
  display: inline-block;
  width: $size;
  height: $size;
  @include border-radius(50%);
  background-color: $bgcolor;
}

/// Mixin que crea un borde interior en el elemento. Se usa una sombra inset solida
/// @parameter {arglist} $values
/// @example
///   @include inside-border(20px, blue, .6);
@mixin inside-border($values...) {
  $borderThickness: 2px !default;
  $borderColor: black !default;
  $borderAlpha: 1 !default;

  @each $value in $values {
    @if type_of($value) == number {
      @if unit($value) == "" {
        $borderAlpha: $value;
      } @else {
        //No need to limit this length to just "px"
        $borderThickness: $value;
      }
    } @else if type_of($value) == color {
      $borderColor: $value;
    }
  }
  box-shadow: inset 0 0 0 $borderThickness rgba($borderColor, $borderAlpha);
}


/// Genera un fondo gradiente
/// @parameter {color} $startcolor
/// @parameter {color} $endcolor
/// @parameter {string} $orientation
/// @example
///   @include background-gradient(red, blue, radial);
/// @author: gillesbertaux
@mixin background-gradient($startcolor, $endcolor, $orientation) {
    background: $startcolor;
    @if $orientation == vertical {
    // vertical
      background: -moz-linear-gradient(top,  $startcolor 0%, $endcolor 100%);
      background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,$startcolor), color-stop(100%,$endcolor));
      background: -webkit-linear-gradient(top,  $startcolor 0%,$endcolor 100%);
      background: -o-linear-gradient(top,  $startcolor 0%,$endcolor 100%);
      background: -ms-linear-gradient(top,  $startcolor 0%,$endcolor 100%);
      background: linear-gradient(to bottom,  $startcolor 0%,$endcolor 100%);
      filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$startcolor', endColorstr='$endcolor',GradientType=0 );
    }
    @else if $orientation == horizontal
    {
    // horizontal
      background: -moz-linear-gradient(left,  $startcolor 0%, $endcolor 100%);
      background: -webkit-gradient(linear, left top, right top, color-stop(0%,$startcolor), color-stop(100%,$endcolor));
      background: -webkit-linear-gradient(left,  $startcolor 0%,$endcolor 100%);
      background: -o-linear-gradient(left,  $startcolor 0%,$endcolor 100%);
      background: -ms-linear-gradient(left,  $startcolor 0%,$endcolor 100%);
      background: linear-gradient(to right,  $startcolor 0%,$endcolor 100%);
      filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$startcolor', endColorstr='$endcolor',GradientType=1 );
    }
    @else
    {
    // radial
      background: -moz-radial-gradient(center, ellipse cover,  $startcolor 0%, $endcolor 100%);
      background: -webkit-gradient(radial, center center, 0px, center center, 100%, color-stop(0%,$startcolor), color-stop(100%,$endcolor));
      background: -webkit-radial-gradient(center, ellipse cover,  $startcolor 0%,$endcolor 100%);
      background: -o-radial-gradient(center, ellipse cover,  $startcolor 0%,$endcolor 100%);
      background: -ms-radial-gradient(center, ellipse cover,  $startcolor 0%,$endcolor 100%);
      background: radial-gradient(ellipse at center,  $startcolor 0%,$endcolor 100%);
      filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$startcolor', endColorstr='$endcolor',GradientType=1 );
    }
}
/// Generate a box emboss effect
/// @parameter {number} $opacity - Strength of light color
/// @parameter {number} $opacity2 - Strength of dark color
/// @example
///   @include box-emboss(0.5, 1);
@mixin box-emboss($opacity, $opacity2){
    box-shadow:white($opacity) 0 1px 0, inset black($opacity2) 0 1px 0;
}