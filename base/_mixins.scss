/* 
------------------------------------------------
MIXINS
------------------------------------------------
*/

@mixin font-size($font-size, $line-height:true){
    font-size:$font-size;
    font-size:($font-size / $base-font-size)*1rem;
    @if $line-height == true{
        line-height:ceil($font-size / $base-line-height) * ($base-line-height / $font-size);
    }
}

@mixin rem-space($property, $values, $isImportant:false) {
  $important: '';

  @if $isImportant == true {
    $important: ' !important';
  }

  #{$property}: space($values)#{$important};
  #{$property}: rem-space($values)#{$important};
}


@mixin vendor($property, $value...){
    -webkit-#{$property}:$value;
       -moz-#{$property}:$value;
        -ms-#{$property}:$value;
         -o-#{$property}:$value;
            #{$property}:$value;
}

@mixin truncate($truncation-boundary){
    max-width:$truncation-boundary;
    white-space:nowrap;
    overflow:hidden;
    text-overflow:ellipsis;
}


@mixin opacity ( $value: 0.5 ) {
  opacity: $value;
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=" $value * 100 ")";
  filter: alpha(opacity= $value * 100 );
  zoom: 1;
}

@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
  border-radius: $radius;
  background-clip: padding-box;
}

@mixin border-top-radius($radius) {
  -webkit-border-top-right-radius: $radius;
  border-top-right-radius: $radius;
  -webkit-border-top-left-radius: $radius;
  border-top-left-radius: $radius;
  background-clip: padding-box;
}
@mixin border-right-radius($radius) {
  -webkit-border-bottom-right-radius: $radius;
  border-bottom-right-radius: $radius;
  -webkit-border-top-right-radius: $radius;
  border-top-right-radius: $radius;
  background-clip: padding-box;
}
@mixin border-bottom-radius($radius) {
  -webkit-border-bottom-right-radius: $radius;
  border-bottom-right-radius: $radius;
  -webkit-border-bottom-left-radius: $radius;
  border-bottom-left-radius: $radius;
  background-clip: padding-box;
}
@mixin border-left-radius($radius) {
  -webkit-border-bottom-left-radius: $radius;
  border-bottom-left-radius: $radius;
  -webkit-border-top-left-radius: $radius;
  border-top-left-radius: $radius;
  background-clip: padding-box;
}

@mixin box-shadow($top, $left, $blur, $color, $inset:"") {
    -webkit-box-shadow:$top $left $blur $color #{$inset};
    -moz-box-shadow:$top $left $blur $color #{$inset};
    box-shadow:$top $left $blur $color #{$inset};
}

@mixin box-emboss($opacity, $opacity2){
    box-shadow:white($opacity) 0 1px 0, inset black($opacity2) 0 1px 0;
}

// Use: @include transition(color .3s ease);
@mixin transition($args...) {
  -webkit-transition: $args;
  -moz-transition: $args;
  -ms-transition: $args;
  -o-transition: $args;
  transition: $args;
}

@mixin effect($time) {
  @include transition(all $time ease-in-out);
}

/* Example:
* @include keyframes(slide-down) {
*  0% { opacity: 1; }
*  90% { opacity: 0; }
* }

* .element {
*   @include animation('slide-down 5s 3');
* }
*/

@mixin keyframes($animation-name) {
  @-webkit-keyframes #{$animation-name} {
    @content;
  }
  @-moz-keyframes #{$animation-name} {
    @content;
  }  
  @-ms-keyframes #{$animation-name} {
    @content;
  }
  @-o-keyframes #{$animation-name} {
    @content;
  }  
  @keyframes #{$animation-name} {
    @content;
  }
}

@mixin animation($str) {
  -webkit-animation: #{$str};
  -moz-animation: #{$str};
  -ms-animation: #{$str};
  -o-animation: #{$str};
  animation: #{$str};
  @include vendor(animation-fill-mode, both);    
}


@mixin font-face($font-family, $file-path, $weight: normal, $style: normal ) {
  @font-face {
    font-family: $font-family;
    font-weight: $weight;
    font-style: $style;

    src: url('#{$file-path}.eot');
    src: url('#{$file-path}.eot?#iefix')               format('embedded-opentype'),
         url('#{$file-path}.woff')                     format('woff'),
         url('#{$file-path}.ttf')                      format('truetype'),
         url('#{$file-path}.svg##{$font-family}')      format('svg');
  }
}

@mixin ghostVerticalAlign(){
  &:before {
    content: '';
    display: inline-block;
    vertical-align: middle;
    height: 100%; width: .1px;
  }
}

@mixin hide-text(){
  border: 0;
  font: 0/0 a;
  text-shadow: none;
  color: transparent;
}

@mixin image-replacement($url, $w, $h){
  @include hide-text;
  background: url(#{$url});
  width: #{$w}px;
  height: #{$h}px;
}

@mixin triangle($width: 20px, $height: 20px, $direction: up, $color: red) {
  width: 0;
  height: 0;
  
  // Right
  @if $direction == right {
    border-top: $height/2 solid transparent;
    border-bottom: $height/2 solid transparent;
    border-left: $width solid $color;
  }

  // Left
  @if $direction == left {
    border-top: $height/2 solid transparent;
    border-bottom: $height/2 solid transparent;
    border-right: $width solid $color;
  }

  // Up
  @if $direction == up {
    border-left: $width/2 solid transparent;
    border-right: $width/2 solid transparent;
    border-bottom: $height solid $color;
  }

  // Down
  @if $direction == down {
    border-left: $width/2 solid transparent;
    border-right: $width/2 solid transparent;
    border-top: $height solid $color;
  }
}

@mixin circle($size, $bgcolor) {
  display: inline-block;
  width: $size;
  height: $size;
  @include border-radius(50%);
  background-color: $bgcolor;
}

// Example: .box { @include inside-border(20px, blue, .6); }
@mixin inside-border($values...) {
  $borderThickness: 2px !default;
  $borderColor: black !default;
  $borderAlpha: 1 !default;

  @each $value in $values {
    @if type_of($value) == number {
      @if unit($value) == "" {
        $borderAlpha: $value;
      } @else {
        //No need to limit this length to just "px"
        $borderThickness: $value;
      }
    } @else if type_of($value) == color {
      $borderColor: $value;
    }
  }
  box-shadow: inset 0 0 0 $borderThickness rgba($borderColor, $borderAlpha);
}

@mixin justify-list() {
  text-align: justify;
  font-size: 0.1px;
  &:after {
    content: '';
    width: 100%;
    display: inline-block;
  }
  & > li { 
    display: inline-block;
    font-size: $base-font-size
  }
}

@mixin clearfix() {
  &:after{
    content: "";
    display: table;
    clear: both
  }
}

@mixin placeholder($color) {
  ::-webkit-input-placeholder {
     color: $color;
  }
  :-moz-placeholder { /* Firefox 18- */
     color: $color;  
  }
  ::-moz-placeholder {  /* Firefox 19+ */
     color: $color;  
  }
  :-ms-input-placeholder {  
     color: $color;  
  }
}

/// Based on Event wrapper
/// @author Harry Roberts
@mixin on-event($active: false) {
    @if $active {
        &:hover,
        &:active,
        &:focus,
        &.active {
            @content;
        }
    } @else {
        &:hover,
        &:active,
        &:focus {
            @content;
        }
    }
}


// Author: gillesbertaux

@mixin background-gradient($startcolor, $endcolor, $orientation) {
    background: $startcolor;
    @if $orientation == vertical {
    // vertical
      background: -moz-linear-gradient(top,  $startcolor 0%, $endcolor 100%);
      background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,$startcolor), color-stop(100%,$endcolor));
      background: -webkit-linear-gradient(top,  $startcolor 0%,$endcolor 100%);
      background: -o-linear-gradient(top,  $startcolor 0%,$endcolor 100%);
      background: -ms-linear-gradient(top,  $startcolor 0%,$endcolor 100%);
      background: linear-gradient(to bottom,  $startcolor 0%,$endcolor 100%);
      filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$startcolor', endColorstr='$endcolor',GradientType=0 );
    }
    @else if $orientation == horizontal
    {
    // horizontal
      background: -moz-linear-gradient(left,  $startcolor 0%, $endcolor 100%);
      background: -webkit-gradient(linear, left top, right top, color-stop(0%,$startcolor), color-stop(100%,$endcolor));
      background: -webkit-linear-gradient(left,  $startcolor 0%,$endcolor 100%);
      background: -o-linear-gradient(left,  $startcolor 0%,$endcolor 100%);
      background: -ms-linear-gradient(left,  $startcolor 0%,$endcolor 100%);
      background: linear-gradient(to right,  $startcolor 0%,$endcolor 100%);
      filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$startcolor', endColorstr='$endcolor',GradientType=1 );
    }
    @else
    {
    // radial
      background: -moz-radial-gradient(center, ellipse cover,  $startcolor 0%, $endcolor 100%);
      background: -webkit-gradient(radial, center center, 0px, center center, 100%, color-stop(0%,$startcolor), color-stop(100%,$endcolor));
      background: -webkit-radial-gradient(center, ellipse cover,  $startcolor 0%,$endcolor 100%);
      background: -o-radial-gradient(center, ellipse cover,  $startcolor 0%,$endcolor 100%);
      background: -ms-radial-gradient(center, ellipse cover,  $startcolor 0%,$endcolor 100%);
      background: radial-gradient(ellipse at center,  $startcolor 0%,$endcolor 100%);
      filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$startcolor', endColorstr='$endcolor',GradientType=1 );
    }
}

@mixin center-block {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

@mixin absolute-center($legacy:false, $width: 0, $height: 0) {
  position: absolute;
  top: 50%;
  left: 50%;
  @if $legacy {
    margin-left: ($width / 2) * -1px;
    margin-top: ($height / 2) * -1px;
  } @else {
    -webkit-transform: translate(-50%,-50%);
    -ms-transform: translate(-50%,-50%);
    transform: translate(-50%,-50%);
  }
}

@mixin absolute($args) {
  $top: nth($args, 1);
  $right: nth($args, 2);
  $bottom: nth($args, 3);
  $left: nth($args, 4);
  
  position: absolute;
  @if $top { @include rem-space(top, $top); };
  @if $right { @include rem-space(right, $right); };
  @if $bottom { @include rem-space(bottom, $bottom); };
  @if $left { @include rem-space(left, $left); };
}

// Transform mixins

@mixin rotate($value) {
  @include vendor(transform, rotate($value));
}
@mixin rotate3d($value) {
  @include vendor(transform, rotate3d($value));
}
@mixin scale($value) {
  @include vendor(transform, scale($value));
}
@mixin scaleX($value) {
  @include vendor(transform, scaleX($value));
}
@mixin scaleY($value) {
  @include vendor(transform, scaleY($value));
}
@mixin scale3d($value) {
  @include vendor(transform, scale3d($value));
}
@mixin translate($value) {
  @include vendor(transform, translate($value));
}
@mixin translate3d($value) {
  @include vendor(transform, translate3d($value));
}
@mixin translateX($value) {
  @include vendor(transform, translateX($value));
}
@mixin translateY($value) {
  @include vendor(transform, translateY($value));
}
@mixin translateZ($value) {
  @include vendor(transform, translateZ($value));
}
@mixin perspective($value) {
  @include vendor(transform, perspective($value));
}




