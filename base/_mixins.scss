/* 
------------------------------------------------
MIXINS
------------------------------------------------
*/

@mixin font-size($font-size, $line-height:true){
    font-size:$font-size;
    font-size:($font-size / $base-font-size)*1rem;
    @if $line-height == true{
        line-height:ceil($font-size / $base-line-height) * ($base-line-height / $font-size);
    }
}

@mixin rem-space($property, $values, $isImportant:false) {
  $resultPx: ();
  $resultRem: ();
  $valuePx: 0;
  $valueRem: 0;
  $important: '';
  @each $value in $values {
    @if $value == auto or $value == 0 {
      $valuePx: $value;
      $valueRem: $value;
    } @else {
      $valuePx: ($value * strip-units($base-spacing-unit)) + px;
      $valueRem: ($value * strip-units($base-spacing-unit) / strip-units($base-font-size)) + rem;
    }
    $resultPx: append($resultPx, $valuePx);
    $resultRem: append($resultRem, $valueRem);
    
  }
  @if $isImportant == true {
    $important: '!important';
  }
  #{$property}: $resultPx #{$important};
  #{$property}: $resultRem #{$important};
}


@mixin vendor($property, $value...){
    -webkit-#{$property}:$value;
       -moz-#{$property}:$value;
        -ms-#{$property}:$value;
         -o-#{$property}:$value;
            #{$property}:$value;
}

@mixin truncate($truncation-boundary){
    max-width:$truncation-boundary;
    white-space:nowrap;
    overflow:hidden;
    text-overflow:ellipsis;
}

@mixin respond-to($media){
  @each $breakpoint in $breakpoints{
      $name: nth($breakpoint, 1);
      $declaration: nth($breakpoint, 2);

      @if $media == $name and $declaration{
          @media only screen and #{$declaration}{
              @content;
          }
      }
  }
 }

@mixin opacity ( $value: 0.5 ) {
  opacity: $value;
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=" $value * 100 ")";
  filter: alpha(opacity= $value * 100 );
  zoom: 1;
}

@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
  border-radius: $radius;
  background-clip: padding-box;
}

@mixin border-top-radius($radius) {
  -webkit-border-top-right-radius: $radius;
  border-top-right-radius: $radius;
  -webkit-border-top-left-radius: $radius;
  border-top-left-radius: $radius;
  background-clip: padding-box;
}
@mixin border-right-radius($radius) {
  -webkit-border-bottom-right-radius: $radius;
  border-bottom-right-radius: $radius;
  -webkit-border-top-right-radius: $radius;
  border-top-right-radius: $radius;
  background-clip: padding-box;
}
@mixin border-bottom-radius($radius) {
  -webkit-border-bottom-right-radius: $radius;
  border-bottom-right-radius: $radius;
  -webkit-border-bottom-left-radius: $radius;
  border-bottom-left-radius: $radius;
  background-clip: padding-box;
}
@mixin border-left-radius($radius) {
  -webkit-border-bottom-left-radius: $radius;
  border-bottom-left-radius: $radius;
  -webkit-border-top-left-radius: $radius;
  border-top-left-radius: $radius;
  background-clip: padding-box;
}

@mixin box-shadow($top, $left, $blur, $color, $inset:"") {
    -webkit-box-shadow:$top $left $blur $color #{$inset};
    -moz-box-shadow:$top $left $blur $color #{$inset};
    box-shadow:$top $left $blur $color #{$inset};
}

@mixin box-emboss($opacity, $opacity2){
    box-shadow:white($opacity) 0 1px 0, inset black($opacity2) 0 1px 0;
}

// Use: @include transition(color .3s ease);
@mixin transition($args...) {
  -webkit-transition: $args;
  -moz-transition: $args;
  -ms-transition: $args;
  -o-transition: $args;
  transition: $args;
}

/* Example:
* @include keyframes(slide-down) {
*  0% { opacity: 1; }
*  90% { opacity: 0; }
* }

* .element {
*   @include animation('slide-down 5s 3');
* }
*/

@mixin keyframes($animation-name) {
  @-webkit-keyframes #{$animation-name} {
    @content;
  }
  @-moz-keyframes #{$animation-name} {
    @content;
  }  
  @-ms-keyframes #{$animation-name} {
    @content;
  }
  @-o-keyframes #{$animation-name} {
    @content;
  }  
  @keyframes #{$animation-name} {
    @content;
  }
}

@mixin animation($str) {
  -webkit-animation: #{$str};
  -moz-animation: #{$str};
  -ms-animation: #{$str};
  -o-animation: #{$str};
  animation: #{$str};
  @include vendor(animation-fill-mode, both);    
}


@mixin font-face($font-family, $file-path, $weight: normal, $style: normal ) {
  @font-face {
    font-family: $font-family;
    font-weight: $weight;
    font-style: $style;

    src: url('#{$file-path}.eot');
    src: url('#{$file-path}.eot?#iefix')               format('embedded-opentype'),
         url('#{$file-path}.woff')                     format('woff'),
         url('#{$file-path}.ttf')                      format('truetype'),
         url('#{$file-path}.svg##{$font-family}')      format('svg');
  }
}

@mixin triangle($direction, $size: 6px, $color: #222){
  content: '';
  display: block;
  position: absolute;
  height: 0; width: 0;
  @if ($direction == 'up'){
    border-bottom: $size solid $color;
    border-left: 1/2*$size solid transparent;
    border-right: 1/2*$size solid transparent;
  }
  @else if ($direction == 'down'){
    border-top: $size solid $color;
    border-left: 1/2*$size solid transparent;
    border-right: 1/2*$size solid transparent;
  }
  @else if ($direction == 'left'){
    border-top: 1/2*$size solid transparent;
    border-bottom: 1/2*$size solid transparent;
    border-right: $size solid $color;
  }
  @else if ($direction == 'right'){
    border-top: 1/2*$size solid transparent;
    border-bottom: 1/2*$size solid transparent;
    border-left: $size solid $color;
  }
}

@mixin ghostVerticalAlign(){
  &:before {
    content: '';
    display: inline-block;
    vertical-align: middle;
    height: 100%; width: .1px;
  }
}

@mixin hide-text(){
  border: 0;
  font: 0/0 a;
  text-shadow: none;
  color: transparent;
}

@mixin image-replacement($url, $w, $h){
  @include hide-text;
  background: url(#{$url});
  width: #{$w}px;
  height: #{$h}px;
}

@mixin triangle($width: 20px, $height: 20px, $direction: up, $color: red) {
  width: 0;
  height: 0;
  
  // Right
  @if $direction == right {
    border-top: $height/2 solid transparent;
    border-bottom: $height/2 solid transparent;
    border-left: $width solid $color;
  }

  // Left
  @if $direction == left {
    border-top: $height/2 solid transparent;
    border-bottom: $height/2 solid transparent;
    border-right: $width solid $color;
  }

  // Up
  @if $direction == up {
    border-left: $width/2 solid transparent;
    border-right: $width/2 solid transparent;
    border-bottom: $height solid $color;
  }

  // Down
  @if $direction == down {
    border-left: $width/2 solid transparent;
    border-right: $width/2 solid transparent;
    border-top: $height solid $color;
  }
}

// Example: .box { @include inside-border(20px, blue, .6); }
@mixin inside-border($values...) {
  $borderThickness: 2px !default;
  $borderColor: black !default;
  $borderAlpha: 1 !default;

  @each $value in $values {
    @if type_of($value) == number {
      @if unit($value) == "" {
        $borderAlpha: $value;
      } @else {
        //No need to limit this length to just "px"
        $borderThickness: $value;
      }
    } @else if type_of($value) == color {
      $borderColor: $value;
    }
  }
  box-shadow: inset 0 0 0 $borderThickness rgba($borderColor, $borderAlpha);
}

@mixin justify-list() {
  text-align: justify;
  font-size: 0.1px;
  &:after {
    content: '';
    width: 100%;
    display: inline-block;
  }
  & > li { 
    display: inline-block;
    font-size: $base-font-size
  }
}
