////
/// Buttons
/// @group helpers
/// @author Nicemondays
/// @since version 0.1
////

@if $use-helpers {

	/// Floats

	.float--right   { float:right!important; }
	.float--left    { float:left !important; }
	.float--none    { float:none !important; }


	/// Text align
	 
	.text--left     { text-align:left  !important; }
	.text--center   { text-align:center!important; }
	.text--right    { text-align:right !important; }


	/// Text transform
	.text--upper 	{ text-transform: uppercase !important;}


	/// Font weight
	.weight--light      	{ font-weight:300!important; }
	.weight--normal     	{ font-weight:400!important; }
	.weight--semibold   	{ font-weight:600!important; }
	.weight--bold   		{ font-weight:700!important; }


	/// Font styled
	.text--unitalic 	{ font-style: normal!important; }
	.decor--none 	    { text-decoration: none!important; }


	/// Positions
	.relative       { position: relative!important; }
	.absolute       { position: absolute!important; }
	.fixed          { position: fixed!important; }


	/// Vertical aligns
	.middle     { vertical-align: middle!important; }
	.bottom     { vertical-align: bottom!important; }
	.top        { vertical-align: top!important; }
	.super      { vertical-align: super!important; }


	/// Display modes
	.inline-block   { display: inline-block!important; }
	.block          { display: block!important; }


	/// Visibility
	.invisible      { visibility: hidden!important; }
	.transparent  	{ @include opacity(0); }
	.mask           { overflow: hidden; }
	.hide           { display: none; }


	/// Script de parseo de la variable de configuracion $space para generar los space helpers 
	@each $name, $data in $space {
		$cont: 1;
		@each $alias in map-get($data, alias) {
			.#{$name}--#{$alias} {
				@include rem-space(map-get($data, prop), nth(map-get($data, values), $cont));
			}
			$responsive: map-get($data, responsive);
			@each $break in $responsive {
				@include respond-to(#{$break}) {
					.#{$break}-#{$name}--#{$alias} {
						@include rem-space(map-get($data, prop), nth(map-get($data, values), $cont), true);
					}	
				}
			}
			$cont: $cont + 1;
		}
	}

	/// Script de parseo de la variable de configuracion $colors para generar los colors helpers
	/// Se generar치n clases de 2 tipos:
	/// .color--<color name><tone name> que se setea el color del texto
	/// .bgcolor--<color name><tone name> que setea el color de fondo
	@each $name, $value in $colors {
		@if type-of($value) == map {
			@each $nametone, $valuetone in $value {
				.color--#{""+$name}#{$nametone} {
					color: $valuetone;
				}
				.bgcolor--#{""+$name}#{$nametone} {
					background-color: $valuetone;
				}
			}
		} @else {
			.color--#{""+$name} {
				color: $value;
			}
			.bgcolor--#{""+$name} {
				background-color: $value;
			}
		}
	}

	/// Script de parseo de la variable de configuracion $faces para generar los font helpers
	/// Esto generar치 una clase para cada fuente definida con la forma .font--<font name>
	@each $name, $value in $faces {
		.font--#{$name} {
			font-family: $value;
		}
	}

	/// Script de parseo de la variable de configuracion $sizes para generar los fontsize helpers
	/// Esto generar치 una clase para cada tama침o de fuente definido con la forma .textsize--<size name>
	@each $name, $value in $sizes {
		.textsize--#{$name} {
			@include font-size($value, false);
		}
	}

	/// Clearfix
	.clearfix {
		@include clearfix;
	}

	/// Responsive visibility helpers
	@each $name, $value in $breakpoints {
		@include respond-to($name) {
			.visible--#{$name} {
				display: block;
			}
			.hide--#{$name} {
				display: none;
			}
		}
	}

}
